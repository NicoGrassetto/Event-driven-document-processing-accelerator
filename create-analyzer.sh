#!/bin/bash

# Script to create a custom AI Content Understanding analyzer from JSON schema
# Based on: https://learn.microsoft.com/en-us/azure/ai-services/content-understanding/quickstart/use-rest-api

set -e

# Variables
RESOURCE_GROUP="rg-content-extraction-3"
DEPLOYMENT_NAME="content-extraction-3-deployment"
SCHEMA_FILE="./schemas/schema.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}Creating Custom Content Extraction Analyzer...${NC}"

# Check if Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo -e "${RED}Error: Azure CLI is not installed. Please install it first.${NC}"
    exit 1
fi

# Check if user is logged in
if ! az account show &> /dev/null; then
    echo -e "${RED}Error: Not logged in to Azure. Please run 'az login' first.${NC}"
    exit 1
fi

# Check if jq is installed (required for schema processing)
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is required for processing the schema file but is not installed.${NC}"
    echo -e "${YELLOW}Please install jq first: brew install jq${NC}"
    exit 1
fi

# Check if schema file exists
if [ ! -f "$SCHEMA_FILE" ]; then
    echo -e "${RED}Error: Schema file not found: $SCHEMA_FILE${NC}"
    echo -e "${YELLOW}Please create your custom schema at: $SCHEMA_FILE${NC}"
    exit 1
fi

# Load schema and generate analyzer configuration
schema_basename=$(basename "$SCHEMA_FILE" .json)
ANALYZER_KIND="extraction"
ANALYZER_NAME="custom-$schema_basename-analyzer"

# Get description from schema file or use default
SCHEMA_DESCRIPTION=$(cat "$SCHEMA_FILE" | jq -r '.description // "Custom analyzer"' 2>/dev/null || echo "Custom analyzer")
ANALYZER_DESCRIPTION="$SCHEMA_DESCRIPTION"

CUSTOM_SCHEMA=$(cat "$SCHEMA_FILE")

echo -e "${GREEN}Using schema: $SCHEMA_FILE${NC}"
echo -e "${BLUE}Analyzer name: $ANALYZER_NAME${NC}"

echo -e "${BLUE}Getting deployment outputs...${NC}"

# Get the endpoint and key from the deployment outputs
ENDPOINT=$(az deployment group show \
    --resource-group $RESOURCE_GROUP \
    --name $DEPLOYMENT_NAME \
    --query properties.outputs.contentUnderstandingEndpoint.value \
    --output tsv)

SERVICE_KEY=$(az deployment group show \
    --resource-group $RESOURCE_GROUP \
    --name $DEPLOYMENT_NAME \
    --query properties.outputs.contentUnderstandingKey.value \
    --output tsv)

if [ -z "$ENDPOINT" ] || [ -z "$SERVICE_KEY" ]; then
    echo -e "${RED}Error: Could not retrieve endpoint or key from deployment. Make sure the service is deployed.${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Retrieved service endpoint and key${NC}"
echo -e "Endpoint: $ENDPOINT"

# Create analyzer using schema from file
echo -e "${BLUE}Creating analyzer '$ANALYZER_NAME' of type '$ANALYZER_KIND'...${NC}"

# Convert schema.json format to Azure AI Content Understanding format
FIELD_SCHEMA=$(cat "$SCHEMA_FILE" | jq '
{
  "fields": (
    .fields | map({
      (.fieldKey): {
        "type": .fieldType,
        "method": "extract",
        "description": .description
      }
    }) | add
  )
}')

# Create the analyzer config using the schema
cat > temp_analyzer_config.json <<EOF
{
  "description": "$ANALYZER_DESCRIPTION",
  "baseAnalyzerId": "prebuilt-documentAnalyzer",
  "config": {
    "returnDetails": true,
    "enableFormula": false,
    "disableContentFiltering": false,
    "estimateFieldSourceAndConfidence": true,
    "tableFormat": "html"
  },
  "fieldSchema": $FIELD_SCHEMA
}
EOF

ANALYZER_CONFIG=$(cat temp_analyzer_config.json)
rm -f temp_analyzer_config.json

echo -e "${BLUE}Analyzer configuration preview:${NC}"
echo "$ANALYZER_CONFIG" | jq . 2>/dev/null || echo "$ANALYZER_CONFIG"

# Make the REST API call to create the analyzer
RESPONSE=$(curl -s -w "%{http_code}" \
    -X PUT \
    -H "Content-Type: application/json" \
    -H "Ocp-Apim-Subscription-Key: $SERVICE_KEY" \
    -d "$ANALYZER_CONFIG" \
    "$ENDPOINT/contentunderstanding/analyzers/$ANALYZER_NAME?api-version=2025-05-01-preview")

# Extract HTTP status code (last 3 characters)
HTTP_STATUS="${RESPONSE: -3}"
RESPONSE_BODY="${RESPONSE%???}"

if [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "200" ]; then
    echo -e "${GREEN}✓ Analyzer '$ANALYZER_NAME' created successfully!${NC}"
    echo -e "${BLUE}Response:${NC}"
    echo "$RESPONSE_BODY" | jq . 2>/dev/null || echo "$RESPONSE_BODY"
    
    # Save analyzer info for reference
    ANALYZER_INFO_FILE="analyzer-info-$(date +%Y%m%d-%H%M%S).json"
    echo "$RESPONSE_BODY" > "$ANALYZER_INFO_FILE"
    echo -e "${GREEN}Analyzer info saved to: $ANALYZER_INFO_FILE${NC}"
    
    # Create or update environment file for Python script
    ENV_FILE=".analyzer-config"
    cat > "$ENV_FILE" <<EOF
# Azure AI Content Understanding Configuration
# Generated by create-analyzer.sh on $(date)

CONTENT_UNDERSTANDING_ENDPOINT=$ENDPOINT
CONTENT_UNDERSTANDING_KEY=$SERVICE_KEY
ANALYZER_NAME=$ANALYZER_NAME
ANALYZER_TYPE=$ANALYZER_KIND
EOF
    
    echo -e "${GREEN}Configuration saved to: $ENV_FILE${NC}"
    echo -e "${YELLOW}Note: Keep this file secure and don't commit it to version control!${NC}"
    
else
    echo -e "${RED}Error: Failed to create analyzer. HTTP Status: $HTTP_STATUS${NC}"
    echo -e "${RED}Response: $RESPONSE_BODY${NC}"
    exit 1
fi

# List all analyzers to confirm creation
echo -e "${BLUE}Listing all analyzers...${NC}"
LIST_RESPONSE=$(curl -s \
    -H "Ocp-Apim-Subscription-Key: $SERVICE_KEY" \
    "$ENDPOINT/contentunderstanding/analyzers?api-version=2025-05-01-preview")

echo -e "${GREEN}Available analyzers:${NC}"
echo "$LIST_RESPONSE" | jq . 2>/dev/null || echo "$LIST_RESPONSE"

echo -e "${GREEN}Script completed successfully!${NC}"
echo -e "${BLUE}You can now use the analyzer '$ANALYZER_NAME' to analyze documents.${NC}"
echo -e "${BLUE}Schema used: $SCHEMA_FILE${NC}"
echo -e "${BLUE}To analyze documents, run: python analyze_document.py${NC}"